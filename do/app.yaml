name: my-app

services:
  # API service
  - name: api
    build:
      dockerfile_path: docker/Dockerfile.api.dev  # path ของ Dockerfile สำหรับ api service
    container_name: api
    env: production
    volumes:
      - .:/app
    depends_on:
      - db
    run:
      command: 'npm start'  # หรือคำสั่งที่ใช้รันแอปของคุณ
    http_port: 3000  # พอร์ตที่ใช้เปิดบริการ (เปลี่ยนตามความเหมาะสม)
    routes:
      - path: /api
    envs:
      - key: DATABASE_URL
        value: "mysql://api:123456@db:3306/api"

  # DB service (MySQL)
  - name: db
    build:
      dockerfile_path: docker/Dockerfile.db  # path ของ Dockerfile สำหรับ db service
    container_name: db
    env: production
    environment:
      MYSQL_DATABASE: api
      MYSQL_USER: api
      MYSQL_PASSWORD: 123456
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - ./db-data:/var/lib/mysql:z
    healthcheck:
      test: "mysql -uroot -p$$MYSQL_ROOT_PASSWORD -e 'SELECT 1;'"
      interval: 10s
      timeout: 30s
      retries: 3

  # Adminer service (สำหรับจัดการ DB ผ่าน UI)
  - name: adminer
    image: adminer
    container_name: adminer
    env: production
    http_port: 8080  # ถ้าคุณต้องการให้เข้าถึง Adminer ผ่าน HTTP
    routes:
      - path: /adminer

  # Nginx service
  - name: nginx
    build:
      dockerfile_path: docker/nginx.dev.Dockerfile  # path ของ Dockerfile สำหรับ Nginx
    container_name: nginx
    restart: always
    ports:
      - 80:80
    depends_on:
      - api
    routes:
      - path: /

  # MinIO service (S3 storage)
  - name: minio
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: minioaccesskey
      MINIO_ROOT_PASSWORD: miniosecretkey
      MINIO_BROWSER_REDIRECT_URL: http://localhost/minio-console
    volumes:
      - minio_data:/data
    command: server /data --address ':9000' --console-address ':9001'
    restart: unless-stopped
    http_port: 9000  # Port for API
    routes:
      - path: /minio

# Volumes definition
volumes:
  - name: minio_data
